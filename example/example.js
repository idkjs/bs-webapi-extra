// Generated by BUCKLESCRIPT VERSION 4.0.2, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Dom$WebapiExtra = require("../src/Dom.js");

var algorithm = "RSASSA-PKCS1-v1_5";

var hash = "SHA-256";

function arrayBufferToBase64(buffer) {
  return btoa(new Uint8Array(buffer).reduce((function (binary, b) {
                    return binary + String.fromCharCode(b);
                  }), ""));
}

function stringToArrayBuffer(str) {
  return new TextEncoder().encode(str).buffer;
}

var JWKMissingKeys = Caml_exceptions.create("Example-WebapiExtra.JWKMissingKeys");

var InternalError = Caml_exceptions.create("Example-WebapiExtra.InternalError");

function fingerprintForRSAJWK(jwk) {
  var match = jwk.e;
  var match$1 = jwk.kty;
  var match$2 = jwk.n;
  if (match !== undefined && match$1 !== undefined && match$2 !== undefined) {
    var match$3 = JSON.stringify({
          e: match,
          kty: match$1,
          n: match$2
        });
    if (match$3 !== undefined) {
      return window.crypto.subtle.digest(hash, stringToArrayBuffer(match$3)).then((function (digestArrayBuffer) {
                    return Promise.resolve(arrayBufferToBase64(digestArrayBuffer));
                  }));
    } else {
      return Promise.reject([
                  InternalError,
                  "Stringify failed."
                ]);
    }
  } else {
    return Promise.reject([
                JWKMissingKeys,
                "JWK must contain all of the following keys: e, kty, n."
              ]);
  }
}

function run() {
  var subtle = window.crypto.subtle;
  var thenl = function (cb) {
    return (function (param) {
        return param.then((function (v) {
                      console.log(v);
                      return Curry._1(cb, v);
                    }));
      });
  };
  var prim = Curry._4(Dom$WebapiExtra.SubtleCrypto[/* generateKeyPair */1], subtle, Curry._4(Dom$WebapiExtra.RsaHashedKeyGenParams[/* make */1], algorithm, 2048, new Uint8Array(/* array */[
                1,
                0,
                1
              ]), Curry._1(Dom$WebapiExtra.HashAlgorithmIdentifier[/* make */0], hash)), false, /* array */[
        /* Sign */925678685,
        /* Verify */-707528807
      ]);
  return thenl((function (prim) {
                  return Promise.resolve(prim);
                }))(thenl(fingerprintForRSAJWK)(thenl((function (param) {
                          return subtle.exportKey("jwk", param);
                        }))(thenl((function (jwk) {
                              return thenl((function () {
                                              return Curry._5(Dom$WebapiExtra.SubtleCrypto[/* importKey */2], subtle, jwk, Curry._2(Dom$WebapiExtra.RsaHashedImportParams[/* make */1], algorithm, Curry._1(Dom$WebapiExtra.HashAlgorithmIdentifier[/* make */0], hash)), true, /* array */[/* Verify */-707528807]);
                                            }))(fingerprintForRSAJWK(jwk));
                            }))(prim.then((function (keyPair) {
                                var prim = subtle.sign(algorithm, keyPair.privateKey, stringToArrayBuffer("Pleeeee"));
                                return thenl((function () {
                                                return subtle.exportKey("jwk", keyPair.publicKey);
                                              }))(thenl((function () {
                                                    return fingerprintForRSAJWK(Curry.app(Dom$WebapiExtra.JsonWebKey[/* create */0], [
                                                                    undefined,
                                                                    undefined,
                                                                    undefined,
                                                                    undefined,
                                                                    undefined,
                                                                    "e",
                                                                    undefined,
                                                                    undefined,
                                                                    undefined,
                                                                    "kty",
                                                                    "n",
                                                                    undefined,
                                                                    undefined,
                                                                    undefined,
                                                                    undefined,
                                                                    undefined,
                                                                    undefined,
                                                                    undefined,
                                                                    /* () */0
                                                                  ]));
                                                  }))(prim.then((function (signature) {
                                                      return subtle.verify(algorithm, keyPair.publicKey, signature, stringToArrayBuffer("hasdf"));
                                                    }))));
                              }))))));
}

run(/* () */0);

exports.algorithm = algorithm;
exports.hash = hash;
exports.arrayBufferToBase64 = arrayBufferToBase64;
exports.stringToArrayBuffer = stringToArrayBuffer;
exports.JWKMissingKeys = JWKMissingKeys;
exports.InternalError = InternalError;
exports.fingerprintForRSAJWK = fingerprintForRSAJWK;
exports.run = run;
/*  Not a pure module */
